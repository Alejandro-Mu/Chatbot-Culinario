from flask import Flask, render_template, request, redirect, url_for, jsonify
import json
import os
import re

app = Flask(__name__)  # Crea la aplicaci√≥n Flask.

BASE_DIR = os.path.dirname(os.path.abspath(__file__))
RUTA_RECETAS = os.path.join(BASE_DIR, "recetas.json")  # Ruta donde se guardan las recetas.

# Funci√≥n para cargar las recetas existentes
def cargar_recetas():
    if os.path.exists(RUTA_RECETAS):
        with open(RUTA_RECETAS, "r", encoding="utf-8") as f:
            return json.load(f)
    return []

# Funci√≥n para guardar las recetas
def guardar_recetas(recetas):
    with open(RUTA_RECETAS, "w", encoding="utf-8") as f:
        json.dump(recetas, f, indent=4, ensure_ascii=False)

# Cargar recetas al iniciar la app (se puede recargar si quieres, pero con esta est√° bien)
recetas = cargar_recetas()

# Funci√≥n para buscar palabras en texto ignorando may√∫sculas y signos de puntuaci√≥n
def contiene_palabra(mensaje, lista_palabras):
    mensaje = mensaje.lower()
    mensaje = re.sub(r'[^\w\s]', '', mensaje)  # Quita signos de puntuaci√≥n
    palabras = mensaje.split()
    for palabra in lista_palabras:
        palabra = palabra.lower()
        if palabra in palabras:
            return True
    return False

@app.route('/')
def home():
    return render_template('index.html')

@app.route("/formulario")
def formulario():
    return render_template("formulario.html")

@app.route("/guardar_receta", methods=["POST"])
def guardar_receta():
    titulo = request.form["titulo"]
    ingredientes = request.form["ingredientes"]
    preparacion = request.form["preparacion"]

    recetas = cargar_recetas()  # Recarga recetas para no perder datos

    nueva_receta = {
        "titulo": titulo,
        "ingredientes": ingredientes,
        "preparacion": preparacion,
    }
    recetas.append(nueva_receta)
    guardar_recetas(recetas)

    return redirect(url_for("home"))

@app.route("/enviar_mensaje", methods=["POST"])
def enviar_mensaje():
    data = request.get_json()
    mensaje_usuario = data.get("mensaje", "").lower()

    saludos = ["hola", "buenos d√≠as", "buenas tardes", "buenas noches", "qu√© tal", "hey"]
    despedidas = ["adi√≥s","Adios", "hasta luego", "nos vemos", "chao", "bye"]
    agradecimientos = ["gracias", "muchas gracias", "gracias amigo", "gracias bot"]
    crear_recetas = ["a√±adir", "crear", "meter", "agregar"]

    # Responder saludos y despedidas
    if contiene_palabra(mensaje_usuario, saludos):
        respuesta = "¬°Hola! ¬øEn qu√© puedo ayudarte? Puedo buscar recetas o a√±adir una nueva."
        return jsonify({"respuesta": respuesta})

    if contiene_palabra(mensaje_usuario, despedidas):
        respuesta = "¬°Hasta luego! ¬°Que tengas un buen d√≠a!"
        return jsonify({"respuesta": respuesta})

    if any(agradecimiento in mensaje_usuario for agradecimiento in agradecimientos):
        respuesta = "¬°De nada! Siempre aqu√≠ para ayudarte üòä"
        return jsonify({"respuesta": respuesta})

    # A√±adir receta
    if contiene_palabra(mensaje_usuario, crear_recetas):
       respuesta = "Perfecto, puedes a√±adir una nueva receta en el formulario"
       return jsonify({"respuesta": respuesta})

    stopwords = {
    # Art√≠culos definidos e indefinidos
    "el", "la", "los", "las", "un", "una", "unos", "unas",

    # Preposiciones comunes
    "a", "ante", "bajo", "cabe", "con", "contra", "de", "desde", "en", "entre",
    "hacia", "hasta", "para", "por", "seg√∫n", "sin", "so", "sobre", "tras",

    # Pronombres personales y posesivos
    "yo", "t√∫", "√©l", "ella", "ello", "nosotros", "vosotros", "ellos", "ellas",
    "me", "te", "se", "nos", "os", "mi", "mis", "tu", "tus", "su", "sus",
    "nuestro", "nuestra", "nuestros", "nuestras", "vos", "vosotras", "vosotros",

    # Adverbios y otros t√©rminos comunes
    "ah√≠", "aqu√≠", "all√≠", "all√°", "as√≠", "bien", "casi", "c√≥mo", "cu√°ndo", "d√≥nde",
    "m√°s", "menos", "muy", "nada", "nunca", "otra", "otras", "otro", "otros", "porqu√©",
    "qu√©", "qui√©n", "quienes", "s√≠", "tambi√©n", "tan", "tanto", "ya",

    # Verbos comunes auxiliares y funcionales
    "ser", "estar", "haber", "tener", "hacer", "poder", "deber", "querer", "saber",

    # Palabras funcionales varias y modismos que no aportan en b√∫squeda
    "quiero", "conmigo", "contiene", "contener", "lleve", "llevar", "lleva",
    "desde", "durante", "mediante", "excepto", "incluso", "salvo", "versus", "v√≠a",

    # Conjunciones y palabras de enlace
    "y", "e", "o", "u", "pero", "sino", "aunque", "porque", "pues", "que",

    # Otros comunes
    "todo", "todos", "todas", "cada", "cual", "cuales", "cualquier", "cuanto",
    "cuanta", "cuantas", "uno", "una", "unos", "unas", "algo", "algunos", "algunas",
      "a", "ac√°", "ah√≠", "al", "algo", "algunas", "algunos", "all√°", "all√≠", "ambos", "ante",
    "antes", "aquel", "aquella", "aquellas", "aquello", "aquellos", "aqui", "aqu√≠", "arriba",
    "as√≠", "atr√°s", "aun", "aunque", "bajo", "bastante", "bien", "cabe", "cada", "casi", "como",
    "con", "conmigo", "conocer", "consider√≥", "contiene", "contener", "contra", "cual", "cuales",
    "cualquier", "cuando", "cuanto", "cuanta", "cuantas", "de", "del", "demasiada", "demasiado",
    "dentro", "desde", "donde", "dos", "durante", "el", "ella", "ellas", "ellos", "emplear",
    "en", "encima", "entonces", "entre", "era", "erais", "eran", "eras", "eres", "es", "esa",
    "esas", "ese", "eso", "esos", "esta", "estaba", "estado", "est√°is", "estamos", "estan", "estar",
    "estar√°", "estas", "este", "esto", "estos", "estoy", "estuve", "ex", "existe", "existen",
    "explic√≥", "fue", "fueron", "fuese", "fui", "fuimos", "gran", "grande", "grandes", "ha",
    "haber", "hab√≠a", "hab√≠an", "habr√°", "habr√°n", "hacer", "hace", "hacen", "hacerlo", "hasta",
    "hay", "haya", "he", "hemos", "hice", "hicieron", "hizo", "hubo", "igual", "incluso",
    "intent√≥", "ir", "jam√°s", "junto", "la", "lado", "las", "le", "les", "lo", "los", "luego",
    "mal", "m√°s", "me", "menos", "mi", "m√≠a", "m√≠as", "mientras", "mio", "m√≠os", "mis", "misma",
    "mismo", "mismos", "modo", "mucho", "muchos", "muy", "nada", "ni", "ninguna", "ninguno",
    "no", "nos", "nosotras", "nosotros", "nuestra", "nuestras", "nuestro", "nuestros", "nunca",
    "o", "os", "otra", "otras", "otro", "otros", "para", "pero", "poco", "por", "porque", "qu√©",
    "que", "quien", "quienes", "sabe", "saber", "se", "sea", "sean", "seg√∫n", "ser", "si", "s√≠",
    "siempre", "sin", "sino", "sobre", "sois", "solamente", "somos", "son", "soy", "su", "sus",
    "tal", "tambi√©n", "tampoco", "tan", "tanto", "te", "tendr√©", "tendr√°", "tenemos", "tener",
    "tenido", "tercero", "ti", "tiene", "tienen", "todo", "todos", "tras", "tu", "t√∫", "tus",
    "tuve", "tuvimos", "tuvo", "un", "una", "uno", "unos", "vosotras", "vosotros", "vuestra",
    "vuestras", "vuestro", "vuestros", "y", "ya", "yo", "quiero", "lleve", "llevar", "lleva"
}


    # Limpiar mensaje y eliminar signos de puntuaci√≥n
    palabras_usuario = set(re.sub(r'[^\w\s]', '', mensaje_usuario).split())
    palabras_usuario = {p for p in palabras_usuario if p not in stopwords}

    recetas_encontradas = []
    for receta in cargar_recetas():
        titulo = receta.get("titulo", "").lower()

        # Buscar que todas las palabras importantes est√©n en el t√≠tulo
        if all(palabra in titulo for palabra in palabras_usuario):
            recetas_encontradas.append(receta) 

    if recetas_encontradas:
        respuesta = ""
        for rec in recetas_encontradas:
            respuesta += (f"Claro, aqu√≠ tienes la receta: {rec['titulo']}\n"
                          f"Ingredientes: {rec['ingredientes']}\n"
                          f"Preparaci√≥n: {rec['preparacion']}\n\n")
    else:
        respuesta = "No encontr√© ninguna receta que coincida con tu b√∫squeda."

    return jsonify({"respuesta": respuesta})

if __name__ == '__main__':
	port = int(os.environ.get("PORT", 5000))
	app.run(host="0.0.0.0", port=port)
    
